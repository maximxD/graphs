import subprocess
import matplotlib.pyplot as plt
import os
from typing import Dict, List

cpp_impl_label = "C++ реализация"
dpc_impl_label = "DPC++ реализация"
openmp_impl_label = "OpenMP реализация"

def run_benchmark(vertices: int, edge_prob: float = 0.3, impls: List[str] = []) -> Dict[str, float]:
    """Запускает программу и возвращает время выполнения для каждой реализации"""
    cmd = ["./main.o", "--vertices", str(vertices), "--prob", str(edge_prob)]
    for impl in impls:
        cmd.append(impl)
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode != 0:
        print(f"Ошибка при запуске программы для {vertices} вершин:")
        print(result.stderr)
        return {}
    
    times = {}
    for line in result.stdout.split('\n'):
        if "микросекунд" in line:
            impl = line.split(':')[0].strip()
            time = float(line.split(':')[1].split()[0])
            print(f"Время выполнения для {impl}: {time} микросекунд")
            times[impl] = time
    
    return times

def plot_results_single(results: Dict[str, List[float]], vertices_list: List[int], edge_prob: float):
    """Строит отдельный график для одной вероятности"""
    plt.figure(figsize=(10, 6))
    
    plt.plot(vertices_list, results.get(cpp_impl_label), marker='o', label='C++')
    plt.plot(vertices_list, results.get(dpc_impl_label), marker='o', label='DPC++')
    plt.plot(vertices_list, results.get(openmp_impl_label), marker='o', label='OpenMP')
    
    plt.xlabel('Количество вершин')
    plt.ylabel('Время выполнения (микросекунды)')
    plt.title(f'Вероятность ребра: {edge_prob}')
    plt.grid(True)
    plt.legend()
    
    # Сохраняем отдельный график
    plt.savefig(f'benchmarks/benchmark_results_p{edge_prob:.1f}.png')
    plt.close()

def plot_results_all(results: Dict[str, List[float]], vertices_list: List[int], edge_prob: float):
    """Строит график в общей сетке"""
    plt.plot(vertices_list, results.get(cpp_impl_label), marker='o', label='C++')
    plt.plot(vertices_list, results.get(dpc_impl_label), marker='o', label='DPC++')
    plt.plot(vertices_list, results.get(openmp_impl_label), marker='o', label='OpenMP')
    
    plt.xlabel('Количество вершин')
    plt.ylabel('Время выполнения (микросекунды)')
    plt.title(f'Вероятность ребра: {edge_prob}')
    plt.grid(True)
    plt.legend()

def main():
    # Список размеров графа для тестирования
    vertices_list = [100, 500, 1000, 2000, 3000, 5000, 7500,10000, 12500, 15000, 17500, 20000, 25000, 30000, 35000, 40000, 50000]
    edge_probs = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
    limits = {
        0.1: 50000,
        0.2: 40000,
        0.3: 30000,
        0.4: 30000,
        0.5: 25000,
        0.6: 20000,
        0.7: 20000,
        0.8: 20000,
        0.9: 15000,
    }

    if not os.path.exists('benchmarks'):
        os.makedirs('benchmarks')
    
    # Создаем сетку графиков
    n_rows = 3
    n_cols = 3
    fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 15))
    fig.suptitle('Зависимость времени выполнения от количества вершин', fontsize=16)
    
    print("Запуск бенчмарка...")
    for idx, edge_prob in enumerate(edge_probs):
        results = {
            cpp_impl_label: [],
            dpc_impl_label: [],
            openmp_impl_label: []
        }
        
        for vertices in vertices_list:
            if vertices <= limits[edge_prob]:
                print(f"\nТестирование для {vertices} вершин и вероятности {edge_prob}...")
                times = run_benchmark(vertices, edge_prob)
            else:
                continue
            
            if not times:
                print(f"Пропуск {vertices} вершин из-за ошибки")
                continue
            
            for impl in results:
                if impl in times:
                    results[impl].append(times[impl])
                else:
                    results[impl].append(None)
        
        # Удаляем реализации, для которых нет результатов
        results = {k: v for k, v in results.items() if any(t is not None for t in v)}
        
        # Строим отдельный график для этой вероятности
        _vertices_list = [v for v in vertices_list if v <= limits[edge_prob]]
        plot_results_single(results, _vertices_list, edge_prob)
        
        # Определяем позицию графика в сетке
        row = idx // n_cols
        col = idx % n_cols
        
        # Переключаемся на нужный subplot
        plt.sca(axes[row, col])
        
        # Строим график в общей сетке
        plot_results_all(results, _vertices_list, edge_prob)
    
    # Настраиваем отступы между графиками
    plt.tight_layout()
    
    # Сохраняем все графики в один файл
    plt.savefig('benchmarks/benchmark_results_all.png')
    plt.close()
    print("\nВсе графики сохранены:")
    print("- Общий график: benchmark_results_all.png")
    for edge_prob in edge_probs:
        print(f"- График для вероятности {edge_prob:.1f}: benchmark_results_p{edge_prob:.1f}.png")

if __name__ == "__main__":
    main()
